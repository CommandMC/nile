# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sds-proto2.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x10sds-proto2.proto\x12\x12tv.twitch.fuel.sds\"R\n\x13\x43ompressionSettings\x12;\n\talgorithm\x18\x01 \x01(\x0e\x32(.tv.twitch.fuel.sds.CompressionAlgorithm\"!\n\x03\x44ir\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x0c\n\x04mode\x18\x02 \x01(\r\"\x89\x01\n\x04\x46ile\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x0c\n\x04mode\x18\x02 \x01(\r\x12\x0c\n\x04size\x18\x03 \x01(\x03\x12\x0f\n\x07\x63reated\x18\x04 \x01(\t\x12&\n\x04hash\x18\x05 \x01(\x0b\x32\x18.tv.twitch.fuel.sds.Hash\x12\x0e\n\x06hidden\x18\x06 \x01(\x08\x12\x0e\n\x06system\x18\x07 \x01(\x08\"K\n\x04Hash\x12\x34\n\talgorithm\x18\x01 \x01(\x0e\x32!.tv.twitch.fuel.sds.HashAlgorithm\x12\r\n\x05value\x18\x02 \x01(\x0c\"9\n\x08Manifest\x12-\n\x08packages\x18\x01 \x03(\x0b\x32\x1b.tv.twitch.fuel.sds.Package\"\xa8\x01\n\x0eManifestHeader\x12<\n\x0b\x63ompression\x18\x01 \x01(\x0b\x32\'.tv.twitch.fuel.sds.CompressionSettings\x12&\n\x04hash\x18\x02 \x01(\x0b\x32\x18.tv.twitch.fuel.sds.Hash\x12\x30\n\tsignature\x18\x03 \x01(\x0b\x32\x1d.tv.twitch.fuel.sds.Signature\"g\n\x07Package\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\'\n\x05\x66iles\x18\x02 \x03(\x0b\x32\x18.tv.twitch.fuel.sds.File\x12%\n\x04\x64irs\x18\x03 \x03(\x0b\x32\x17.tv.twitch.fuel.sds.Dir\"U\n\tSignature\x12\x39\n\talgorithm\x18\x01 \x01(\x0e\x32&.tv.twitch.fuel.sds.SignatureAlgorithm\x12\r\n\x05value\x18\x02 \x01(\x0c**\n\x14\x43ompressionAlgorithm\x12\x08\n\x04none\x10\x00\x12\x08\n\x04lzma\x10\x01*)\n\rHashAlgorithm\x12\n\n\x06sha256\x10\x00\x12\x0c\n\x08shake128\x10\x01*)\n\x12SignatureAlgorithm\x12\x13\n\x0fsha256_with_rsa\x10\x00')

_COMPRESSIONALGORITHM = DESCRIPTOR.enum_types_by_name['CompressionAlgorithm']
CompressionAlgorithm = enum_type_wrapper.EnumTypeWrapper(_COMPRESSIONALGORITHM)
_HASHALGORITHM = DESCRIPTOR.enum_types_by_name['HashAlgorithm']
HashAlgorithm = enum_type_wrapper.EnumTypeWrapper(_HASHALGORITHM)
_SIGNATUREALGORITHM = DESCRIPTOR.enum_types_by_name['SignatureAlgorithm']
SignatureAlgorithm = enum_type_wrapper.EnumTypeWrapper(_SIGNATUREALGORITHM)
none = 0
lzma = 1
sha256 = 0
shake128 = 1
sha256_with_rsa = 0


_COMPRESSIONSETTINGS = DESCRIPTOR.message_types_by_name['CompressionSettings']
_DIR = DESCRIPTOR.message_types_by_name['Dir']
_FILE = DESCRIPTOR.message_types_by_name['File']
_HASH = DESCRIPTOR.message_types_by_name['Hash']
_MANIFEST = DESCRIPTOR.message_types_by_name['Manifest']
_MANIFESTHEADER = DESCRIPTOR.message_types_by_name['ManifestHeader']
_PACKAGE = DESCRIPTOR.message_types_by_name['Package']
_SIGNATURE = DESCRIPTOR.message_types_by_name['Signature']
CompressionSettings = _reflection.GeneratedProtocolMessageType('CompressionSettings', (_message.Message,), {
  'DESCRIPTOR' : _COMPRESSIONSETTINGS,
  '__module__' : 'sds_proto2_pb2'
  # @@protoc_insertion_point(class_scope:tv.twitch.fuel.sds.CompressionSettings)
  })
_sym_db.RegisterMessage(CompressionSettings)

Dir = _reflection.GeneratedProtocolMessageType('Dir', (_message.Message,), {
  'DESCRIPTOR' : _DIR,
  '__module__' : 'sds_proto2_pb2'
  # @@protoc_insertion_point(class_scope:tv.twitch.fuel.sds.Dir)
  })
_sym_db.RegisterMessage(Dir)

File = _reflection.GeneratedProtocolMessageType('File', (_message.Message,), {
  'DESCRIPTOR' : _FILE,
  '__module__' : 'sds_proto2_pb2'
  # @@protoc_insertion_point(class_scope:tv.twitch.fuel.sds.File)
  })
_sym_db.RegisterMessage(File)

Hash = _reflection.GeneratedProtocolMessageType('Hash', (_message.Message,), {
  'DESCRIPTOR' : _HASH,
  '__module__' : 'sds_proto2_pb2'
  # @@protoc_insertion_point(class_scope:tv.twitch.fuel.sds.Hash)
  })
_sym_db.RegisterMessage(Hash)

Manifest = _reflection.GeneratedProtocolMessageType('Manifest', (_message.Message,), {
  'DESCRIPTOR' : _MANIFEST,
  '__module__' : 'sds_proto2_pb2'
  # @@protoc_insertion_point(class_scope:tv.twitch.fuel.sds.Manifest)
  })
_sym_db.RegisterMessage(Manifest)

ManifestHeader = _reflection.GeneratedProtocolMessageType('ManifestHeader', (_message.Message,), {
  'DESCRIPTOR' : _MANIFESTHEADER,
  '__module__' : 'sds_proto2_pb2'
  # @@protoc_insertion_point(class_scope:tv.twitch.fuel.sds.ManifestHeader)
  })
_sym_db.RegisterMessage(ManifestHeader)

Package = _reflection.GeneratedProtocolMessageType('Package', (_message.Message,), {
  'DESCRIPTOR' : _PACKAGE,
  '__module__' : 'sds_proto2_pb2'
  # @@protoc_insertion_point(class_scope:tv.twitch.fuel.sds.Package)
  })
_sym_db.RegisterMessage(Package)

Signature = _reflection.GeneratedProtocolMessageType('Signature', (_message.Message,), {
  'DESCRIPTOR' : _SIGNATURE,
  '__module__' : 'sds_proto2_pb2'
  # @@protoc_insertion_point(class_scope:tv.twitch.fuel.sds.Signature)
  })
_sym_db.RegisterMessage(Signature)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _COMPRESSIONALGORITHM._serialized_start=798
  _COMPRESSIONALGORITHM._serialized_end=840
  _HASHALGORITHM._serialized_start=842
  _HASHALGORITHM._serialized_end=883
  _SIGNATUREALGORITHM._serialized_start=885
  _SIGNATUREALGORITHM._serialized_end=926
  _COMPRESSIONSETTINGS._serialized_start=40
  _COMPRESSIONSETTINGS._serialized_end=122
  _DIR._serialized_start=124
  _DIR._serialized_end=157
  _FILE._serialized_start=160
  _FILE._serialized_end=297
  _HASH._serialized_start=299
  _HASH._serialized_end=374
  _MANIFEST._serialized_start=376
  _MANIFEST._serialized_end=433
  _MANIFESTHEADER._serialized_start=436
  _MANIFESTHEADER._serialized_end=604
  _PACKAGE._serialized_start=606
  _PACKAGE._serialized_end=709
  _SIGNATURE._serialized_start=711
  _SIGNATURE._serialized_end=796
# @@protoc_insertion_point(module_scope)
